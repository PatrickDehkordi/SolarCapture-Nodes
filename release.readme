
SolarCapture Release Notes
==========================

 This package is the GA release of SolarCapture 1.3.1.

 Refer to the README and SolarCapture User Guide (SF-108469-CD) for more
 information, usage and installation instructions.

 Check the copy of the Release Notes on the download site for any
 late-breaking updates.


New Features in v1.3.1
----------------------

This section summarises the main features added since the 1.3.0 release.
Refer to the ChangeLog for a full list of bug fixes and other changes.

1) Performance improvements in the core, libpcap and Snort DAQ.

2) Support for forwarding packets at very high rates with packed-stream
   mode.

3) Much improved documentation for the C API, installed at
   /usr/share/doc/solar_capture-$version/c_api.

4) Create directories (if needed) for output files.  This is particularly
   useful when using file rotation and putting output files into
   directories that include the time in their names.

5) Support for RHEL7 (requires OpenOnload-201502 or later).
   Support for Ubuntu 12.04 LTS, Ubuntu 14.04 LTS and Ubuntu 14.10;
   the release package now includes ".deb" files.
   Refer to INSTALL-deb.txt for installation instructions on Ubuntu.


Known Issues in v1.3.1
----------------------

1) The "require_huge_pages" and "request_huge_pages" attributes only take
   effect on kernel versions 2.6.32 and newer.  On older kernels, the
   attributes are ignored.

2) Packed-stream mode is only supported on kernel versions 2.6.32 and newer.

3) Setting EF_VI_PD_FLAGS in the environment results in a failure if the
   vi_mode attribute is set to "auto" (default) or "packed_stream".

4) If traffic is to be captured from an adapter other than an AOE while
   solar_aoed is running, vi_mode must be set to "normal" or
   "packed_stream".

5) If sfptpd is not running when using hardware timestamps, it is possible for
   all packets to have identical timestamps.  The solution is to start sfptpd.


New Features in v1.3.0
----------------------

This section summarises the main features added since the 1.2.2
release:

1) A new capture-packed-stream firmware variant is now supported.  This allows
   for line rate capture on 7000 series adapters.  Packed stream mode is enabled
   by default in SolarCapture if the capture-packed-stream firmware variant is
   loaded.  This behaviour can be controlled by using the new "vi_mode"
   attribute.

2) Egress capture is now supported on 7000 series adapters.  This adds to
   existing support for egress capture on AOE adapters.

3) SolarCapture threads can operate in interrupt driven mode as well as busy
   waiting.  To select between these, two new command line options have been
   added: capture_busy_wait and writeout_busy_wait.

4) A new packet playback tool called solar_replay has been added.  This allows
   packets from a file in pcap format to be replayed through a Solarflare
   adapter interface with flexible control over replay speed and bandwidth.

5) On 7000 series adapters, SolarCapture can be configured to capture packets
   while preserving the frame check sequence (FCS).

6) A Snort DAQ is included in the package.  This supports the read-file, passive
   and inline modes.

7) Added a new environment variable SC_PCAP_RECV_BATCH to control polling rate
   when using solar_libpcap.

8) solar_capture_doc has been added to help document SolarCapture.  Currently it
   documents all attributes that can be set via SC_ATTR.

9) solar_capture can now accept a config_file option, which specifies a file
   containing a list of arguments, one per line.


New Features in v1.2.2
----------------------

1) Added a new environment variable SC_PCAP_NANOSEC=1 to select nanosecond
   precision when using the libpcap bindings.  This is an alternative to
   using the pcap_set_tstamp_precision() call.  NB. The application using
   libpcap must separately be configured to expect nanosecond precision.


New Features in v1.2.1
----------------------

This section summarises the main features added since the 1.2.0
release:

1) The SolarCapture AOE package has been updated to include
   OpenOnload-201310-u2.

2) Disk capture performance has been improved.

3) A new configuration item for AOE SolarCapture allows balancing of
   transmission buffer space (RHD buffer) across the number of RHD channels
   actually being used.

4) Updated libpcap in solar_libpcap to v1.5.3.
   The following libpcap APIs are now supported:
     pcap_set_tstamp_type()       -- used to request h/w timestamps
     pcap_set_tstamp_precision()  -- used to request nanosec precision

5) New syntax for enabling Arista hardware timestamps.  Instead of:

     solar_capture ... "sc_arista_ts:kf_ip_dest=224.1.2.3;kf_eth_dhost=..."

   instead do:

     solar_capture ... "arista_ts=kf_ip_dest=224.1.2.3"

   If using multicast for the keyframe IP address, you no longer need to
   specify the mac address (kf_eth_dhost).

   When using this new syntax solar_capture will automatically install a
   stream filter to capture the keyframes if needed.

6) Arista hardware timestamps can now be used with multiple capture cores,
   provided that a Flareon (or future) adapter is used.


New Features in v1.2.0
----------------------

This section summarises the main features added since the 1.0.2
release:

1) libpcap support
 - applications using the libpcap API can link against SolarCapturePro
 and capture and/or inject packets.

2) Hardware timestamp support for the SFN7000-series and AOE adapters
 - SolarCapturePro can utilise the hardware receive timestamps

3) Support for software based filtering.
 - SolarCapturePro can filter packets in software using user-provided
 filters in the BPF syntax.

4) "Sniff" mode
 - On suitable hardware (7000-series and AOE) SolarCapturePro can
 capture packets without stealing them from regular receivers

5) Improved diagnostics and statistics
 - solar_capture_monitor can show packet rate, bandwidth and Arista
 timestamping statistics.

6) AOE support
 * Capturing in sniff and steal modes.
 * Richer filtering specification.
 * Capture of rx and tx on both ports.
 * 2Gb of buffering per capture point.
 * Loss-less delivery to the host CPU.
 * Hardware timestamps.

7) Application Clustering
 - spread capture load across a set of VIs so that multiple
 threads/processes on different CPUs can cooperate to process it.



Support
-------

 Please contact your local Solarflare support representative or email
 <support@solarflare.com>.


Copyright
---------

 Copyright (c) 2015, Solarflare Communications Inc.  All rights reserved.
 Please see LICENSE.txt for terms of use.
[root@r720c solar_capture-1.3.1.11]# ls
c_api  ChangeLog  examples  LICENSE.txt  README  ReleaseNotes
[root@r720c solar_capture-1.3.1.11]# more README

Introduction
============

 SolarCapture is a set of tools for capturing, timestamping, processing and
 injecting network traffic.  SolarCapture is able to capture packets
 received from the network at very high rates, apply filtering in hardware
 and software, perform custom processing, and write packets to disk in PCAP
 format.

 SolarCapture includes APIs for customisation and for embedding into
 applications, and a flexible framework for putting together applications
 from pluggable processing components.

 SolarCapture is written by Solarflare.  Please see LICENSE.txt for terms
 of use.

 This README file includes a brief summary of SolarCapture features.
 Please see the SolarCapture User Guide for more details.

 SolarCapture uses the kernel-bypass features of Solarflare network
 adapters to achieve very high levels of capture and injection performance.

 SolarCapture assigns highly accurate timestamps to captured packets.  When
 used with Solarflare's PTP-enabled adapters the capture timestamps are
 synchronised across the network.  On Flareon and AOE adapters
 timestamps can be taken in hardware by the adapter clock.

 SolarCapture consists of the following components:

 - Command line tools for capture, replay and monitoring.

 - A python interface for creating custom configurations and applications.

 - A C programming interface for extending SolarCapture's processing
   pipeline and adding custom features.

 - A C library for embedding SolarCapture into applications.


Dependencies
============

 SolarCapture uses device drivers that are included in the OpenOnload
 distribution.  OpenOnload is available from www.openonload.org.

 This release of SolarCapture is compatible with the following
 versions of Onload:

   * openonload-201405-u2 and newer

 It is expected that this version of SolarCapture will be compatible with
 EnterpriseOnload 3.1 (not yet released at time of writing).

 SolarCapture is tested on the following Linux distributions:

   Redhat Enterprise Linux 6.x
   Redhat Enterprise Linux 7.x
   Suse Enterprise Linux 11.x
   Suse Enterprise Linux 12.x
   Ubuntu 12.04 LTS
   Ubuntu 14.04 LTS
   Ubuntu 14.10


Command line usage
==================

 SolarCapture can be invoked from the command line.  By default it
 captures all traffic on an interface, which requires root privileges.
 For example, to capture all traffic arriving on interface eth2 and
 eth3:

   $ solar_capture eth2=./eth2.pcap eth3=./eth3.pcap

 To write timestamps with nanosecond resolution instead of the default
 microseconds:

   $ solar_capture format=pcap-ns eth2=./eth2.pcap

 Note that the nano-second PCAP format is understood by a number of
 tools including wireshark, but not by tcpdump.

 There are a number of tunables and options for managing what streams
 of packets are captured.  For details run:

   $ solar_capture help

 To use the libpcap bindings, prefix your command line with solar_libpcap
 as follows:

   $ solar_libpcap tcpdump -i eth2


Monitoring
==========

 The internal state of a SolarCapture process can be monitored using
 the solar_capture_monitor tool.

 To get a list of running SolarCapture processes:

   $ solar_capture_monitor

 To monitor the state of a SolarCapture process:

   $ watch -d -n1 solar_capture_monitor <pid> dump

 Running solar_capture_monitor has very little impact on the performance of
 the capture process. Other solar_capture_monitor commands include
 "line_rate" and "line_total" to show packet rate and bandwidth.


libpcap
=======

 SolarCapturePro provides a modified version of libpcap, which can
 capture and inject packets using the SolarCapturePro architecture,
 bypassing the kernel.  This can be used in two ways, either by
 statically linking to the modified libpcap, or for existing
 applications that dynamically link against libpcap, a wrapper script
 is provided to enable the SolarCapturePro version of libpcap to be
 used.

 The wrapper script can be used as follows:
  $ solar_libpcap <application>


Software filtering
==================

 As well as filtering in hardware using the "streams=" option,
 SolarCapturePro adds support for filtering in software with filters
 specified in the BPF syntax.  Packets that have been captured will be
 matched against the specified filter, and those that do not match
 will be discarded.  The filter can be specified on the command line
 using the "filter=<bpf-filter-string>" option.  For example:

  $ solar_capture eth2=/tmp/pcap filter="src host 172.16.132.99"

 Software filtering is applied to all packets captured.  The captured
 packets can be limited by using the streams option in the normal way.
 For example to capture all unicast udp traffic for a specific host
 the following options could be used:

  $ solar_capture eth2=/tmp/pcap streams="eth:00:0F:53:01:7D:40" filter="udp"


Sniff mode
==========

 Packets captured by SolarCapture are not available by default to
 the kernel stack, OpenOnload or any other process.

 On Flareon and AOE adapters SolarCapturePro can be run in sniff mode
 (add mode=sniff to the command line) whereby packets captured by
 SolarCapture will be replicated in hardware and so also be made
 available to other receivers.

 The behaviour of sniff mode can be modified using the promiscuous
 option.  If promiscuous is enabled ("promiscuous=1" which is the
 default) then all packets arriving at the sniffed interface will also
 be delivered to SolarCapturePro.  If promiscuous is not enabled
 ("promiscuous=0") then only packets that would anyway be delivered to
 the host will be delivered to SolarCapturePro.

 On other adapters is not possible to use SolarCapture to monitor
 streams that are consumed by applications on the same server.  We
 recommend using SolarCapture with mirror/span switch ports.


Hardware timestamps
===================

 On Flareon and AOE adapters SolarCapturePro will attempt to assign
 timestamps in hardware, but fall back to software if they are not
 available, e.g. due to a resource shortage or missing license.

 This can be controlled with the require_hw_timestamps (fail if
 hardware timestamps are not available) and
 force_sw_timestamps (do not attempt to use hardware timestamps)
 SolarCapture attributes.



Buffer management
=================

 SolarCapture allocates pools of buffers into which captured data is saved
 before writing out to the capture file.  By default, about 20,000 packet
 buffers are allocated to each interface, and more (or less) can be
 configured by setting the "buffers=" option on the command line.

 The packet buffers use a finite resource on the network adapter, which
 gives an overall limit of around 120,000 buffers per adapter.  On systems
 with SR-IOV support it is possible to bypass this limit as follows:

   $ export EF_VI_PD_FLAGS=vf
   $ solar_capture ...

 Please refer to the OpenOnload User Guide for instructions on how to
 enable SR-IOV.

 It is also possible to bypass the buffer limit by using physical address
 mode.  Note that this mode requires root privileges because it bypasses
 hardware address checking in the adapter.

   $ export EF_VI_PD_FLAGS=phys
   $ solar_capture ...


Notes
=====

 - By default, packets captured by SolarCapture are not available to the
   kernel stack, OpenOnload or any other process.  On Flareon and AOE
   adapters you can use "mode=sniff" to capture a copy of packets
   arriving at the host.

 - Timestamps are assigned either by the adapter (Flareon adapters with
   SolarCapture Pro license and AOE adapters) or by the SolarCapture
   software.  Software timestamps are subject to system jitter caused by
   the OS kernel, BIOS and other processes.  To get timestamps that are as
   accurate as possible, SolarCapture should be run on isolated cores which
   are configured to minimise interruptions from system interrupts and
   processes.

 - The capture performance depends on many factors.  In most deployments
   the sustained capture rate is likely to be limited by storage
   performance.  Other factors that affect capture rate include:

   * The I/O performance of the server.

   * The size of the internal packet buffer pool.

   * Spreading of load using receive-side scaling and application
     clustering.
